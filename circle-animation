import turtle
import colorsys

screen = turtle.Screen()
screen.setup(1000,1000)
screen.title("Gradually Lighting Up")
turtle.hideturtle()
turtle.speed(0)
turtle.tracer(0,0)

screen.bgcolor('black')
firefly = turtle.Turtle() # turtle for drawing the lighting dot
firefly.hideturtle()
firefly.up()

# Constants
H_YELLOWGREEN = 0.22 # constant: hue value of yellow green color.
V_DARK = 0.1 # constant: brightness value of initial dark state
V_BRIGHT = 1 # constant: brightness value of the brightest state
FPS = 30 # constant: refresh about 30 times per second
TIMER_VALUE = 1000//FPS # the timer value in milliseconds for timer events
CYCLE = 5 # costant: 5 second cycle for firefly to light up
LIGHTUP_TIME = 1 # constant: 1 second light up and dim

# Variables
v = V_DARK # initial brightness state
t = 0 # current time
should_draw = True # this variable is used to decide if drawing is necessary to save CPU time

def update_brightness():
    global t,v,should_draw
    t += TIMER_VALUE/1000 # every time this function is called, time increases by this value
    lastv = v # lastv is v before potential change
    if t > CYCLE:
        t -= CYCLE # make sure time stays within CYCLE
    if t < CYCLE-LIGHTUP_TIME:
        v = V_DARK # dormant period
    elif t < CYCLE-LIGHTUP_TIME/2: # gradually (linearly) lighting up period
        v = V_DARK + (V_BRIGHT-V_DARK)*(t-(CYCLE-LIGHTUP_TIME))/(LIGHTUP_TIME/2)
    else: # gradually (linearly) dimming period
        v = V_BRIGHT - (V_BRIGHT-V_DARK)*(t-(CYCLE-LIGHTUP_TIME/2))/(LIGHTUP_TIME/2)

    if v != lastv:
        should_draw = True # v has changed, so set should_draw to True
#    print(t,v)
    screen.ontimer(update_brightness,TIMER_VALUE)

def draw():
    global v,firefly,should_draw
    if should_draw == False: # There is no change. Don't draw and return immediately
        return
    firefly.clear() # clear the current drawing
    color = colorsys.hsv_to_rgb(H_YELLOWGREEN,1,v) # use colorsys to convert HSV to RGB color
    firefly.color(color)
    firefly.dot(400)
    should_draw = False # just finished drawing, set should_draw to False
    
screen.ontimer(update_brightness,TIMER_VALUE)
while True:
    draw() # draw forever
    screen.update()
